<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd">
    <!--1.扫描controller包-->
    <!--       <context:component-scan base-package="com.fruitsalesplatform">-->
    <!--            制定扫包规则 ,只扫描使用@Controller注解的JAVA类-->
    <!--           <context:include-filter type="annotation"-->
    <!--                                   expression="org.springframework.stereotype.Controller"/>-->
    <!--           <context:exclude-filter type="annotation"-->
    <!--                                   expression="org.springframework.stereotype.Service"/>-->
    <!--       </context:component-scan>-->
    <!--    spring-mvc.xml:-->
    <!--    &lt;!&ndash; 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 &ndash;&gt;-->
    <!--    <context:component-scanbase-package="com.yltd.cnyun">-->
    <!--    &lt;!&ndash; 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 &ndash;&gt;-->
    <!--    <context:include-filtertype="annotation"-->
    <!--    expression="org.springframework.stereotype.Controller"/>-->
    <!--    <context:exclude-filter    type="annotation" expression="org.springframework.stereotype.Service"    />-->
    <!--</context:component-scan>-->




    <!--redis文件-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>

    <!--配置redis参数-->
    <bean class="redis.clients.jedis.JedisPoolConfig" id="poolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxActive}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <!--配置redis的连接参数 如需要密码,请配置,database是redis的指定哪个库-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="database" value="${redis.dbIndex}"/>
        <property name="poolConfig" ref="poolConfig"/>
    </bean>

    <!--redis操作模版,使用该对象可以操作redis-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>

        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>

        <!--开启事务-->
        <property name="enableTransactionSupport" value="true"/>
    </bean>

    <!-- 配置redis缓存管理器 -->
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate"/>
        <property name="defaultExpiration" value="${redis.expiration}"/>
    </bean>

    <!-- 配置RedisCacheConfig -->
    <bean id="redisCacheConfig" class="com.spring.redis.config.RedisCacheConfig">
        <constructor-arg ref="jedisConnectionFactory"/>
        <constructor-arg ref="redisTemplate"/>
        <constructor-arg ref="redisCacheManager"/>
    </bean>

    <bean id="keyGenerator" class="com.spring.redis.config.KeyGenerator"/>

    <cache:annotation-driven cache-manager="redisCacheManager" key-generator="keyGenerator"/>


<!--    <context:component-scan base-package="com.spring.redis.dao"/>-->
<!--    <context:component-scan base-package="com.spring.redis.entity"/>-->
<!--    <context:component-scan base-package="com.spring.redis.controller"/>-->
<!--    <context:component-scan base-package="com.spring.redis.mapper"/>-->
</beans>